import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, \
    PreCheckoutQuery, LabeledPrice
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import BadRequest
import requests
import datetime
from datetime import timedelta
import time
import re
import api_client
import config
from api_client import *
import uuid
import yaml
from utils import setup_logging, log

key = config.Promik
API_TOKEN = config.TELEGRAM_TOKEN
YOOTOKEN = config.PAYMENTS_TOKEN

urls = {'iphone': 'https://apps.apple.com/mx/app/amneziawg/id6478942365?l=en-GB', 'android': 'https://play.google.com/store/apps/details?id=org.amnezia.vpn', 'macos': 'https://github.com/hayashidevs/potokvpn-client/releases/latest/download/PotokVPN.dmg', 'windows': 'https://github.com/hayashidevs/potokvpn-client/releases/latest/download/PotokVPN_x64.exe', 'linux': 'https://github.com/hayashidevs/potokvpn-client/releases/latest/download/PotokVPN_Linux_Installer.tar'}

tgIDs = []

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

# States
class FormStates(StatesGroup):
    PROMOCODE = State()
    DEVICE_SELECTION = State()


class FormStatesTestSubs(StatesGroup):
    PROMO = State()
    NAME_SUBS = State()


class Oform(StatesGroup):
    NameDevice = State()
    Promo = State()
    Tariff = State()


class UpdateSubs(StatesGroup):
    SelectSubscription = State()


class Add_days_for_sub(StatesGroup):
    Tariff = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(Command("start"), state='*')
async def start(message: types.Message, state: FSMContext):
    await state.finish()
    check_register = await api_client.check_and_register_with_username(
            message.from_user.id, 
            message.from_user.username, 
            message.from_user.first_name,
            message.from_user.last_name
    )

    if check_register is False:
        status = await api_client.check_user_registration(message.from_user.id)
        if status[1] is False:
            await api_client.register_user(
                message.from_user.id, 
                message.from_user.username, 
                message.from_user.first_name,
                message.from_user.last_name
            )
            await message.answer(
                f"{message.from_user.first_name}\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ [ –ø–æ—Ç–æ–∫ ùó©ùó£ùó° ]\nüåê –í–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π VPN —Å–µ—Ä–≤–∏—Å\nüåÖ –°–ª–µ–¥–∏ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –≥—Ä—É–ø–ø–µ –∏ –±—É–¥—å –≤ –ø–æ—Ç–æ–∫–µ @potok_you", reply_markup=types.ReplyKeyboardRemove())
        else:
            await message.answer(
                f"{message.from_user.first_name}\n–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ [ –ø–æ—Ç–æ–∫ ùó©ùó£ùó° ]\nüåê –í–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π VPN —Å–µ—Ä–≤–∏—Å\nüåÖ –°–ª–µ–¥–∏ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –≥—Ä—É–ø–ø–µ –∏ –±—É–¥—å –≤ –ø–æ—Ç–æ–∫–µ @potok_you", reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.answer(
                f"{message.from_user.first_name}\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ [ –ø–æ—Ç–æ–∫ ùó©ùó£ùó° ]\nüåê –í–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π VPN —Å–µ—Ä–≤–∏—Å\nüåÖ –°–ª–µ–¥–∏ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –≥—Ä—É–ø–ø–µ –∏ –±—É–¥—å –≤ –ø–æ—Ç–æ–∫–µ @potok_you", reply_markup=types.ReplyKeyboardRemove())

    await main_menu(message)



@dp.pre_checkout_query_handler(state='*')
async def checkout(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT, state='*')
async def got_payment(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if 'referral_client_id' in data:
            referral_client_id = data['referral_client_id']
            referral_client_telegram_id = data['referral_client_telegram_id']

        if message.successful_payment.invoice_payload == 'product_id_prod':
            subs_id = data['subs_id']
            tarname = data['tariffname']
            days = await get_days_from_ratename(tarname)
            await update_dateend_referral(subs_id, days)
            await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞!", reply_markup=types.ReplyKeyboardRemove())
            await state.finish()
            await main_menu(message)
        else:
            inline_keyboard = InlineKeyboardMarkup()
            inline_keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main_menu'))

            date_start = datetime.now().strftime("%Y-%m-%dT%H:%M:%S")
            response = await api_client.add_device(message.from_user.id, data['tariffname'], None, date_start)
            uuid_pattern = r'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
            uuid_match = re.search(uuid_pattern, response)
            if uuid_match:
                subscription_id = uuid_match.group(0)
                data['subs_id'] = subscription_id
                config_name = subscription_id[:8]  # Extract first 8 digits for config_name
                update_payload = {'config_name': config_name}
                await api_client.update_subscription_is_used(subscription_id, update_payload)
            else:
                print("UUID not found in response.")
                await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ UUID –≤ –æ—Ç–≤–µ—Ç–µ.")
                log(subscription_id, data, config_name, update_payload, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ UUID –≤ –æ—Ç–≤–µ—Ç–µ.", response, uuid_match )
                return

            try:
                if data['is_referral'] == True:
                    chatid = data.get('chatid')
                    update_result = await update_usedref(message.from_user.id)
                    bonus_days = await get_bonus_days_from_ratename(data['tariffname'])
                    if bonus_days is None:
                        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞.")
                        return
                    print(f"Bonus days for rate '{data['tariffname']}': {bonus_days}")

                    client_subscriptions = await get_subscriptions_by_client_id(referral_client_id)
                    if isinstance(client_subscriptions, str):
                        await message.answer(client_subscriptions, reply_markup=inline_keyboard)
                        return

                    await state.update_data(subscriptions=client_subscriptions)

                    reply_keyboard_for_referral = InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                    for subscription in client_subscriptions:
                        reply_keyboard_for_referral.add(
                            InlineKeyboardButton(subscription['name'] if subscription['name'] else "Unnamed Subscription",
                                                callback_data=f'add_subs_{subscription["id"]}///{bonus_days}'))

                    await bot.send_message(
                        referral_client_telegram_id,
                        f'üî§ –í–∞—à –¥—Ä—É–≥ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –í–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º\nüì≤ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –º—ã –¥–æ–±–∞–≤–∏–º –í–∞–º {bonus_days} –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞',
                        reply_markup=reply_keyboard_for_referral
                    )

                    print(f"Updating referred_by for client: {message.from_user.id}, referred_by: {referral_client_id}")
                    result = await add_referred_by(message.from_user.id, referral_client_id)
                    print(f"Referral update result: {result}")

                    if not result:
                        await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞.')
                        log(result, referral_client_telegram_id, client_subscriptions, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞." )
                        return

            except Exception as e:
                print(f'–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ –±—ã–ª —É–∫–∞–∑–∞–Ω, –Ω–æ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {e}')
                log( f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ –±—ã–ª —É–∫–∞–∑–∞–Ω, –Ω–æ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {e}" )

            product_id = message.successful_payment.invoice_payload

            subscription_id = data['subs_id']
            config_name = subscription_id[:8]
            count_subs = await get_subscription_count_by_telegram_id(message.from_user.id)
            print(count_subs)
            device_name = f'{message.from_user.first_name}_{count_subs + 1}'
            keyboard = InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                InlineKeyboardButton("Iphone", url=urls['iphone']),
                InlineKeyboardButton("Android", url=urls['android']),
                InlineKeyboardButton("MacOS", url=urls['macos']),
                InlineKeyboardButton("Windows", url=urls['windows']),
            )
            await message.reply(f'üîê –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', reply_markup=types.ReplyKeyboardRemove())
            await message.reply(f'‚§µÔ∏è –ß—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å [–ø–æ—Ç–æ–∫ VPN], —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard –ø–æ–¥ –í–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', reply_markup=keyboard)
            try:
                response = requests.post(f'{config.WGAPI_URL}/wireguard/add_user/', json={'subscription_id': subscription_id})
                response_data = response.json()

                print(f'Wireguard API response: {response_data}')
                log(f'Wireguard API response: {response_data}')

                if response.status_code != 200 or 'config_content' not in response_data:
                    await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Wireguard.")
                    log(f"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Wireguard.", response.status_code, 'config_content', response_data )
                    return

                config_file_text = response_data.get('config_content', '').replace(",::/128", "")

                if not config_file_text:
                    await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
                    log("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:", config_file_text)
                    return

                config_file_path = f'configs/{subscription_id[:8]}.conf'
                with open(config_file_path, 'w+') as config_file:
                    config_file.write(config_file_text)

                await bot.send_document(message.chat.id, open(config_file_path, 'rb'))
                os.remove(config_file_path)

                update_data = {
                    'subscription_id': subscription_id,
                    'config_name': config_name
                }

                response = requests.post(f'{config.DJANGO_API_URL}/api/update_subscription/', data=update_data)
                print(response)
            except Exception as e:
                print(f'Error during Wireguard API request: {str(e)}')
                log(f'Error during Wireguard API request: {str(e)}')
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API Wireguard.")

            await update_name_subs(subscription_id, device_name)
            await state.finish()
            await main_menu(message)
            



@dp.callback_query_handler(lambda c: c.data and c.data.startswith('add_subs_'))
async def process_add_subs(call: types.CallbackQuery, state: FSMContext):
    try:
        # Parse the subscription ID and bonus days from the callback data
        data = call.data.split('///')
        subs_id = data[0].replace('add_subs_', '')
        bonus_days = int(data[1])

        # Update the subscription end date with the bonus days
        result = await update_dateend_referral(subs_id, bonus_days)
        if 'successfully' in result:
            await call.message.answer(f'–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {bonus_days} –¥–Ω–µ–π!')
        else:
            await call.message.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {result}')
            log(f'–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {result}')

        await state.finish()
    except Exception as e:
        print(f"Exception in process_add_subs: {e}")
        log(f"Exception in process_add_subs: {e}")
        await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.finish()


# Input Ref Code
@dp.callback_query_handler(text='inputrefcode', state='*')
async def add_device(call: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main_menu'))
    await call.message.edit_text("‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –í–∞—à–µ–≥–æ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É –¥–æ -30% –Ω–∞ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É", reply_markup=keyboard)
    await Oform.Promo.set()




async def main_menu(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data='support'),
        InlineKeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data='instructions'),
        InlineKeyboardButton("–õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç", callback_data='account'),
        InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='add_device')
    )
    
    used_test, _ = await is_test_subscription_used(message.from_user.id)
    if not used_test:
        keyboard.add(InlineKeyboardButton("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ üéÅ", callback_data='test_subscription'))
    
    await message.answer("üóÇÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=keyboard)

async def main_menu_call(call: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data='support'),
        InlineKeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data='instructions'),
        InlineKeyboardButton("–õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç", callback_data='account'),
        InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='add_device'),
    )

    used_test, _ = await is_test_subscription_used(call.from_user.id)
    if not used_test:
        keyboard.add(InlineKeyboardButton("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ üéÅ", callback_data='test_subscription'))

    await bot.send_message(call.from_user.id, "üóÇÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=keyboard)


@dp.callback_query_handler(text='instructions', state='*')
async def test_subscription(call: types.CallbackQuery, state: FSMContext):
    inline_button = types.InlineKeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", url="https://teletype.in/@potok_you/guide")
    inline_button2 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='back_to_main_menu')

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(inline_button)
    keyboard.add(inline_button2)

    await call.message.answer(text="üìë –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π —Å–µ—Ä–≤–∏—Å–∞", reply_markup=keyboard)


@dp.callback_query_handler(text='add_device')
async def add_device(call: types.CallbackQuery):
    refby = await get_user_details(call.from_user.id)
    print(f'REFFERAL BY: {refby}')
    if refby is None:
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("–î–∞", callback_data='inputrefcode'),
            InlineKeyboardButton("–ù–µ—Ç", callback_data='skiprefcode'),
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main_menu')
        )
        await call.message.edit_text(
                    f"üéüÔ∏è –£ –≤–∞—Å –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥?",
                    reply_markup=keyboard)
    else:
        rates = await api_client.list_rates()

        filtered_rates = [rate for rate in rates if 'price' in rate and rate['price']]
        filtered_rates.sort(key=lambda rate: rate['price'])

        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for rate in filtered_rates:
            keyboard.add(KeyboardButton(f"{rate['name']} - {rate['price']} —Ä—É–±."))

        await call.message.answer("‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏", reply_markup=keyboard)
        await Oform.Tariff.set()
    


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query_handler(text='back_to_main_menu', state='*')
async def back_to_main_menu(call: types.CallbackQuery, state: FSMContext):
    await state.finish()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    await main_menu(call.message)



@dp.callback_query_handler(text='test_subscription', state='*')
async def test_subscription(call: types.CallbackQuery, state: FSMContext):
    # Check if the user has already used the referral
    used_test, client_details = await is_test_subscription_used(call.from_user.id)
    
    if used_test:
        await call.message.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø–æ–¥–∞—Ä–æ–∫.")
        await main_menu_call(call)
        return
    
    await call.message.answer("üéÅ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")
    await call.message.delete_reply_markup()  # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'test_subscription'
    await FormStatesTestSubs.PROMO.set()


@dp.message_handler(Command("add_device"), state='*')
async def add_device(message: types.Message, state: FSMContext):
    try:
        await state.finish()
    except:
        pass
    refby = await get_user_details(message.from_user.id)
    if refby is None:
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("–î–∞", callback_data='inputrefcode'),
            InlineKeyboardButton("–ù–µ—Ç", callback_data='skiprefcode'),
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main_menu')
        )
        await message.reply(
                    f"üéüÔ∏è –£ –≤–∞—Å –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥?",
                    reply_markup=keyboard)
    else:
        rates = await api_client.list_rates()

        filtered_rates = [rate for rate in rates if 'price' in rate and rate['price']]
        filtered_rates.sort(key=lambda rate: rate['price'])

        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for rate in filtered_rates:
            keyboard.add(KeyboardButton(f"{rate['name']} - {rate['price']} —Ä—É–±."))

        await message.answer("‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏", reply_markup=keyboard)
        await Oform.Tariff.set()


@dp.message_handler(Command("invite"), state='*')
async def get_ref_code(message: types.Message, state: FSMContext):
    try:
        await state.finish()
    except:
        pass
    unical_ref_code = await get_referral_id_by_telegram_id(message.from_user.id)
    if unical_ref_code is None:
        unical_ref_code = await get_client_id_from_telegram_id(message.from_user.id)
        if not unical_ref_code:
            log("Account not found", unical_ref_code)
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.")
            return
    
    inline_keyboard = InlineKeyboardMarkup()
    inline_keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='account'))
    await bot.send_message(message.from_user.id, f"üéüÔ∏è –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: <pre>{unical_ref_code}</pre>\n–° –µ–≥–æ –ø–æ–º–æ—â—å—é –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ 30 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n‚§µÔ∏è –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É", reply_markup=inline_keyboard, parse_mode="HTML")



@dp.callback_query_handler(text='get_ref_code')
async def get_ref_code(call: types.CallbackQuery):
    unical_ref_code = await get_referral_id_by_telegram_id(call.from_user.id)
    if unical_ref_code is None:
        unical_ref_code = await get_client_id_from_telegram_id(call.from_user.id)
        if not unical_ref_code:
            log("Account not found", unical_ref_code)
            await call.message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.")
            return
    
    inline_keyboard = InlineKeyboardMarkup()
    inline_keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='account'))
    await bot.send_message(call.from_user.id, f"üéüÔ∏è –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: <pre>{unical_ref_code}</pre>\n–° –µ–≥–æ –ø–æ–º–æ—â—å—é –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ 30 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n‚§µÔ∏è –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É", reply_markup=inline_keyboard, parse_mode="HTML")
    

@dp.message_handler(Command("account"), state='*')
async def my_devices(message: types.Message, state: FSMContext):
    try:
        await state.finish()
    except:
        pass
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main_menu'),
        InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω", callback_data='change_plan'),
        InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='add_device'),
        InlineKeyboardButton('–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏', callback_data='get_config'),
        InlineKeyboardButton('–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', callback_data='get_ref_code')
    )

    client_id = await get_client_id_from_telegram_id(message.from_user.id)
    if not client_id:
        log("Account not found ", client_id)
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.", reply_markup=keyboard)
        return

    subscriptions = await get_subscriptions_by_client_id(client_id)
    print(subscriptions)

    if isinstance(subscriptions, str):
        # Handle the case when an error message is returned
        await message.reply(subscriptions, reply_markup=keyboard)
        return

    texttoper = f"–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n"
    for subscription in subscriptions:
        if subscription['clientid'] == client_id:
            date_string = subscription['datestart']
            date_object = datetime.strptime(date_string, "%Y-%m-%dT%H:%M:%SZ")
            readable_date = date_object.strftime("%d %B %Y, %H:%M:%S")
            date_string2 = subscription['dateend']
            date_object2 = datetime.strptime(date_string2, "%Y-%m-%dT%H:%M:%SZ")
            readable_date2 = date_object2.strftime("%d %B %Y, %H:%M:%S")
            texttoper += f"<pre>–ü–æ–¥–ø–∏—Å–∫–∞: {subscription['name']}\n–ù–∞—á–∞–ª–æ: {readable_date}\n–ö–æ–Ω–µ—Ü: {readable_date2}\n\n"

        texttoper += '</pre>'

    await message.reply(texttoper, reply_markup=keyboard, parse_mode='HTML')

@dp.callback_query_handler(text='account')
async def my_devices(call: types.CallbackQuery, state: FSMContext):
    try:
        await state.finish()
    except:
        pass
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main_menu'),
        InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω", callback_data='change_plan'),
        InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='add_device'),
        InlineKeyboardButton('–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏', callback_data='get_config'),
        InlineKeyboardButton('–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', callback_data='get_ref_code')
    )

    client_id = await get_client_id_from_telegram_id(call.from_user.id)
    if not client_id:
        log("Account not found ", client_id)
        await call.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.", reply_markup=keyboard)
        return

    subscriptions = await get_subscriptions_by_client_id(client_id)
    print(subscriptions)

    if isinstance(subscriptions, str):
        # Handle the case when an error message is returned
        await call.message.edit_text(subscriptions, reply_markup=keyboard)
        return

    texttoper = f"–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n"
    for subscription in subscriptions:
        if subscription['clientid'] == client_id:
            date_string = subscription['datestart']
            date_object = datetime.strptime(date_string, "%Y-%m-%dT%H:%M:%SZ")
            readable_date = date_object.strftime("%d %B %Y, %H:%M:%S")
            date_string2 = subscription['dateend']
            date_object2 = datetime.strptime(date_string2, "%Y-%m-%dT%H:%M:%SZ")
            readable_date2 = date_object2.strftime("%d %B %Y, %H:%M:%S")
            texttoper += f"<pre>–ü–æ–¥–ø–∏—Å–∫–∞: {subscription['name']}\n–ù–∞—á–∞–ª–æ: {readable_date}\n–ö–æ–Ω–µ—Ü: {readable_date2}\n\n"

        texttoper += '</pre>'

    await call.message.edit_text(texttoper, reply_markup=keyboard, parse_mode='HTML')


@dp.callback_query_handler(text='change_plan')
async def change_plan(call: types.CallbackQuery):
    client_id = await get_client_id_from_telegram_id(call.from_user.id)
    subs_user = await get_subscriptions_by_client_id(client_id)
    print(subs_user)
    reply_keyboard = InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for subs in subs_user:
        datestart = subs['datestart']
        dateend = subs['dateend']
        days = (datetime.strptime(dateend, "%Y-%m-%dT%H:%M:%SZ") - datetime.strptime(datestart, "%Y-%m-%dT%H:%M:%SZ")).days

        if days >= 31:
            reply_keyboard.add(
                InlineKeyboardButton(f"{subs['name']} - {days // 30} –º–µ—Å." if subs['name'] else "Unnamed Rate",
                                    callback_data=f'add_days_for_{subs["id"]}')
            )
        else:
            reply_keyboard.add(
                InlineKeyboardButton(f"{subs['name']} - {days} –¥–Ω–µ–π" if subs['name'] else "Unnamed Rate",
                                    callback_data=f'add_days_for_{subs["id"]}')
            )
    await bot.send_message(call.from_user.id, "üîÄ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω\n‚úîÔ∏è –¢–µ–∫—É—â–∏–µ –¥–Ω–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö", reply_markup=reply_keyboard)


@dp.callback_query_handler(text='get_config')
async def get_config(call: types.CallbackQuery):
    client_id = await get_client_id_from_telegram_id(call.from_user.id)
    subs_user = await get_subscriptions_by_client_id(client_id)
    print(subs_user)
    reply_keyboard = InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for subs in subs_user:
        if not subs['is_used']:
            datestart = subs['datestart']
            dateend = subs['dateend']
            days = (datetime.strptime(dateend, "%Y-%m-%dT%H:%M:%SZ") - datetime.strptime(datestart, "%Y-%m-%dT%H:%M:%SZ")).days
            if days >= 31:
                reply_keyboard.add(
                    InlineKeyboardButton(f"{subs['name']} - {days // 30} –º–µ—Å." if subs['name'] else "Unnamed Rate",
                                        callback_data=f'g_conf_{subs["id"]}')
                )
            else:
                reply_keyboard.add(
                    InlineKeyboardButton(f"{subs['name']} - {days} –¥–Ω–µ–π" if subs['name'] else "Unnamed Rate",
                                        callback_data=f'g_conf_{subs["id"]}')
                )
    await bot.send_message(call.from_user.id, "üì± –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–π/—É–¥–∞–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª", reply_markup=reply_keyboard)



@dp.callback_query_handler(text='skiprefcode', state="*")
async def skip_code(call: types.CallbackQuery, state: FSMContext):
    rates = await api_client.list_rates()

    filtered_rates = [rate for rate in rates if 'price' in rate and rate['price']]
    filtered_rates.sort(key=lambda rate: rate['price'])

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for rate in filtered_rates:
        keyboard.add(KeyboardButton(f"{rate['name']} - {rate['price']} —Ä—É–±."))

    await call.message.answer("‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏", reply_markup=keyboard)
    await Oform.Tariff.set()


@dp.message_handler(state=Oform.Promo)
async def process_promo_code(message: types.Message, state: FSMContext):
    try:
        inline_keyboard = InlineKeyboardMarkup()
        inline_keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main_menu'))

        client_input = message.text
        client_id = await get_client_id_from_telegram_id(message.from_user.id)

        # Get own client details to check own referral_id
        own_client_details = await someone_used_referral(client_id)
        if own_client_details.get('referral_id') == client_input:
            await message.answer("üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥", reply_markup=inline_keyboard)
            await Oform.Promo.set()
            return

        # Find the client by referral_id or id
        if len(client_input) == 36 and '-' in client_input:
            client = await someone_used_referral(client_input)
        else:
            client = await find_client_by_referral_id(client_input)
            if client == None:
                log("Client Referral code did not found: ", client)
                await message.answer("ÔøΩÔøΩÔøΩ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º", reply_markup=inline_keyboard)
                await Oform.Promo.set()
                return

        if isinstance(client, str):
            await message.answer(client, reply_markup=inline_keyboard)
            await Oform.Promo.set()
            return

        async with state.proxy() as data:
            data['referral_client_id'] = client['id']  # Save referral client ID to state
            data['referral_client_telegram_id'] = client['telegramid']  # Save telegram id to state
            data['is_referral'] = True  # Mark as referral for future state transitions

        async with state.proxy() as data:
            is_referral = data.get('is_referral', False)
            rates = await api_client.list_rates_isreferral() if is_referral else await api_client.list_rates()

        filtered_rates = [rate for rate in rates if 'price' in rate and rate['price']]
        filtered_rates.sort(key=lambda rate: rate['price'])

        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for rate in filtered_rates:
            keyboard.add(KeyboardButton(f"{rate['name']} - {rate['price']} —Ä—É–±."))

        await message.answer("‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏", reply_markup=keyboard)
        await Oform.Tariff.set()

    except BadRequest as e:
        print(f"BadRequest Exception: {e}")
        log(f"BadRequest Exception: {e}")
    except Exception as e:
        log(f"Exception: {e}")
        print(f"Exception: {e}")



@dp.message_handler(state=UpdateSubs.SelectSubscription)
async def process_subscription_selection(message: types.Message, state: FSMContext):
    try:
        selected_subscription_name = message.text
        print(f"User selected subscription name: {selected_subscription_name}")

        data = await state.get_data()
        subscriptions = data.get('subscriptions', [])
        print(f"Available subscriptions from state: {subscriptions}")

        selected_subscription = next(
            (subscription for subscription in subscriptions if subscription['name'] == selected_subscription_name),
            None
        )

        if not selected_subscription:
            log("Selected subscription not found: ", selected_subscription)
            await message.answer("–í—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        print(f"Selected subscription details: {selected_subscription}")

        # Update the subscription end date
        update_result = await update_dateend_referral(selected_subscription['id'])
        await message.answer(update_result)

        # Optionally reset state or set to a new state
        await state.finish()
    except Exception as e:
        print(f"Exception in process_subscription_selection: {e}")
        log(f"Exception in process_subscription_selection: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@dp.callback_query_handler(text='support', state='*')
async def test_subscription(call: types.CallbackQuery, state: FSMContext):
    state.finish()
    inline_button = types.InlineKeyboardButton(text="–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/potok_support")
    inline_button2 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='back_to_main_menu')

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(inline_button)
    keyboard.add(inline_button2)

    await call.message.answer(text="‚ÑπÔ∏è –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", reply_markup=keyboard)


@dp.message_handler(Command("support"), state='*')
async def test_subscription(message: types.Message, state: FSMContext):
    state.finish()
    inline_button = types.InlineKeyboardButton(text="–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/potok_support")
    inline_button2 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='back_to_main_menu')

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(inline_button)
    keyboard.add(inline_button2)

    await message.answer(text="‚ÑπÔ∏è –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", reply_markup=keyboard)



@dp.message_handler(state=FormStates.PROMOCODE)
async def process_promo_code(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['promo_code'] = message.text
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ª–æ–≥–∏–∫—É
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.")
    await state.finish()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


@dp.callback_query_handler(state='*')
async def get_config_by_name(call: types.CallbackQuery, state: FSMContext):
    if 'g_conf_' in call.data:
        subs_id = call.data.replace('g_conf_', '')
        config_file_text = requests.post(f'{config.WGAPI_URL}/wireguard/get_config/', json={'subscription_id': subs_id}).json()['config_content']
        config_file_text = config_file_text.replace(",::/128", "")
        file_path = f'configs/{subs_id[:8]}.conf'
        with open(file_path, 'w+') as config_file:
            config_file.write(config_file_text)
        file = types.InputFile(file_path, filename=f"{subs_id[:8]}.conf")
        await bot.send_document(call.from_user.id, file)
        await main_menu_call(call)
    elif 'add_subs_' in call.data:
        subs_id = call.data.replace('add_subs_', '').split('///')[0]
        bonus_days = call.data.replace('add_subs_', '').split('///')[1]
        await bot.send_message(call.from_user.id, f'–í–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ –±—ã–ª –ø—Ä–æ–¥–ª—ë–Ω —Å—Ä–æ–∫ –Ω–∞ {bonus_days} –¥–Ω–µ–π!')
        await api_client.update_dateend_referral(subs_id, int(bonus_days))
    elif 'add_days_for_' in call.data:
        subs_id = call.data.replace('add_days_for_', '')
        rates = await api_client.list_rates()

        filtered_rates = [rate for rate in rates if 'price' in rate and rate['price']]
        filtered_rates.sort(key=lambda rate: rate['price'])

        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for rate in filtered_rates:
            keyboard.add(KeyboardButton(f"{rate['name']} - {rate['price']} —Ä—É–±."))
        await bot.send_message(call.from_user.id, '‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏', reply_markup=keyboard)
        await Add_days_for_sub.Tariff.set()
        async with state.proxy() as data:
            data['subs_id'] = subs_id


@dp.message_handler(state=Add_days_for_sub.Tariff)
async def process_device_type(message: types.Message, state: FSMContext):
    tariffname_price = message.text.split(' - ')
    tariffname = tariffname_price[0]
    tariffprice = re.sub(r'\D', '', tariffname_price[1])  # Remove non-numeric characters
    
    async with state.proxy() as data:
        data['tariffname'] = tariffname

    prices = [
        LabeledPrice(label=tariffname, amount=int(tariffprice) * 100)  # Convert to minor units, e.g., kopeks
    ]
    await bot.send_invoice(
        chat_id=message.chat.id,
        title='–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞',
        description='–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏',
        provider_token=YOOTOKEN,
        currency='RUB',
        prices=prices,
        start_parameter='pay',
        payload='product_id_prod'
    )

@dp.message_handler(state=FormStatesTestSubs.PROMO)
async def process_device_type(message: types.Message, state: FSMContext):
    promo = message.text
    # Check if the entered promo code is the predefined key
    if promo == key:
        # Update the test subscription field for the user
        # await update_test_subscription_used(message.from_user.id)
        
        # Attempt to add a new test subscription for the user
        response = await api_client.add_device(
            message.from_user.id, 'test rate', '–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞', 
            datetime.now().strftime("%Y-%m-%dT%H:%M:%S")
        )
        
        # If the response is not a string, something went wrong
        if not isinstance(response, str):
            await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.')
            await state.finish()
            return
        
        # Proceed with creating the UUID and configuring the subscription
        subscription_id = response
        try:
            uuid_obj = uuid.UUID(subscription_id)
        except ValueError:
            await message.answer('–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç UUID.')
            await state.finish()
            return
        
        # Prepare the WireGuard API payload with the subscription ID
        wg_payload = {'subscription_id': str(uuid_obj)}
        print(f"Request to WireGuard API: {wg_payload}")
        
        # Send request to WireGuard API
        wg_response = requests.post(f'{config.WGAPI_URL}/wireguard/add_user/', json=wg_payload)
        print(f"Response from WireGuard API: {wg_response.status_code} - {wg_response.text}")
        
        # Handle any issues in the WireGuard response
        if wg_response.status_code != 200:
            await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API WireGuard. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.')
            await state.finish()
            return
        
        # Extract configuration content from response and write to a file
        wg_response_data = wg_response.json()
        config_file_text = wg_response_data.get('config_content', '').replace(",::/128", "")
        
        if not config_file_text:
            await message.answer('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é WireGuard.')
            await state.finish()
            return

        # Save configuration to a file and send to the user
        config_file_path = f'configs/{subscription_id[:8]}.conf'
        with open(config_file_path, 'w') as config_file:
            config_file.write(config_file_text)
        
        await bot.send_document(message.chat.id, open(config_file_path, 'rb'))
        os.remove(config_file_path)
        
        # Notify user of successful test subscription creation
        await message.answer(
        f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n"
        "–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–¥–∞—Ä–æ—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å Potok VPN –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n"
        '<a href="https://teletype.in/@potok_you/guide">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</a>',
        parse_mode=ParseMode.HTML
    )

        
        await state.finish()
        await main_menu(message)
    
    # Check if the promo code exists and is valid
    elif await get_uniqe_codes_and_update(promo):
        # Update the test subscription field for the user
        # await update_test_subscription_used(message.from_user.id)
        
        # Attempt to add a new promotional subscription
        response = await api_client.add_device(
            message.from_user.id, 'free_sub', '–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞', 
            datetime.now().strftime("%Y-%m-%dT%H:%M:%S")
        )
        
        # Handle response to ensure subscription creation was successful
        if not isinstance(response, str):
            await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.')
            await state.finish()
            return
        
        subscription_id = response
        
        # Verify the format of the subscription ID
        try:
            uuid_obj = uuid.UUID(subscription_id)
        except ValueError:
            await message.answer('–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç UUID.')
            await state.finish()
            return
        
        # Send subscription ID to WireGuard API
        wg_payload = {'subscription_id': str(uuid_obj)}
        wg_response = requests.post(f'{config.WGAPI_URL}/wireguard/add_user/', json=wg_payload)
        
        if wg_response.status_code != 200:
            await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API WireGuard. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.')
            await state.finish()
            return
        
        # Get and clean up configuration text
        wg_response_data = wg_response.json()
        config_file_text = wg_response_data.get('config_content', '').replace(",::/128", "")
        
        if not config_file_text:
            await message.answer('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é WireGuard.')
            await state.finish()
            return
        
        # Save and send configuration file to user
        config_file_path = f'configs/{subscription_id[:8]}.conf'
        with open(config_file_path, 'w') as config_file:
            config_file.write(config_file_text)
        
        await bot.send_document(message.chat.id, open(config_file_path, 'rb'))
        os.remove(config_file_path)
        
        await message.answer(
        f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n"
        "–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–¥–∞—Ä–æ—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å Potok VPN –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n"
        '<a href="https://teletype.in/@potok_you/certificates">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</a>',
        parse_mode=ParseMode.HTML
    )

        
        await state.finish()
        await main_menu(message)
    
    # If the promo code is invalid, show error message
    else:
        await message.answer('üö´ –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –ª–∏–±–æ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è')
        await main_menu(message)


@dp.message_handler(state=Oform.Tariff)
async def process_tariff(message: types.Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ —Ü–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        tariffname_price = message.text.split(' - ')
        tariffname = tariffname_price[0]
        tariffprice = re.sub(r'\D', '', tariffname_price[1])  # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞—Ä–∏—Ñ–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        async with state.proxy() as data:
            data['tariffname'] = tariffname

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Ç–∞—Ä–∏—Ñ–∞
        telegram_id = message.chat.id
        client_id = await get_client_id_from_telegram_id(telegram_id)
        rate_id = await get_rate_id_from_ratename(tariffname)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"http://127.0.0.1:5000/initiate_payment",
                json={
                    "client_id": client_id,
                    "rate_id": rate_id,
                    "telegram_id": telegram_id
                }
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    payment_link = data.get("payment_link")
                    if payment_link:
                        keyboard_payment = InlineKeyboardMarkup().add(InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=payment_link))
                        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É –≤ Telegram
                        await message.reply(
                            f"‚úÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ\n"
                            "üí¨ –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç.", reply_markup=keyboard_payment
                        )
                    else:
                        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                else:
                    error_message = await response.text()
                    await message.reply(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã: {error_message}")
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")



async def print_state(state: FSMContext):
    async with state.proxy() as data:
        print("Current state data:", data)

async def midnight_task():
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{config.DJANGO_API_URL}/api/subscriptions/") as response:
            if response.status != 200:
                log(f"Failed to get subscriptions with status {response.status}: {await response.text()}")
                print(f"Failed to get subscriptions: {response.status}")
                return f"Failed to get subscriptions with status {response.status}: {await response.text()}"

            subscriptions = await response.json()

        for i in subscriptions:
            now = datetime.utcnow()  # Use UTC time for consistent comparisons
            end_datetime = datetime.strptime(i['dateend'], "%Y-%m-%dT%H:%M:%SZ")
            time_difference = end_datetime - now
            sub_name = i['name']

            if time_difference.days == 2:
                telegram_id = await get_telegram_id_for_client_id(i['clientid'])
                print(f"Sending message to Telegram ID: {telegram_id}")
                
                inline = InlineKeyboardMarkup().add(InlineKeyboardButton(text="‚è©Ô∏è –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='change_plan'))
                
                try:
                    await bot.send_message(
                        chat_id=telegram_id,
                        text=f"üîö –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –í–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ <b>{sub_name}</b> –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 2 –¥–Ω—è\n‚è©Ô∏è –ü—Ä–æ–¥–ª–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –º–æ–∂–Ω–æ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ, –ª–∏–±–æ –ø–æ –∫–Ω–æ–ø–∫–µ [‚è©Ô∏è –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É] –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\nüéüÔ∏è –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ –¥–æ 30 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞",
                        parse_mode=ParseMode.HTML,
                        reply_markup=inline
                    )
                    print("Message sent successfully.")
                except Exception as e:
                    log(f"Failed to send message: {e}")
                    print(f"Failed to send message: {e}")

            elif time_difference.days == 1:
                telegram_id = await get_telegram_id_for_client_id(i['clientid'])
                print(f"Sending message to Telegram ID: {telegram_id}")
                
                inline = InlineKeyboardMarkup().add(InlineKeyboardButton(text="‚è©Ô∏è –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='change_plan'))
                
                try:
                    await bot.send_message(
                        chat_id=telegram_id,
                        text=f"üîö –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –í–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ <b>{sub_name}</b> –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å\n‚è©Ô∏è –ü—Ä–æ–¥–ª–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –º–æ–∂–Ω–æ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ, –ª–∏–±–æ –ø–æ –∫–Ω–æ–ø–∫–µ [‚è©Ô∏è –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É] –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\nüéüÔ∏è –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ –¥–æ 30 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞",
                        parse_mode=ParseMode.HTML,
                        reply_markup=inline
                    )
                    print("Message sent successfully.")
                except Exception as e:
                    log(f"Failed to send message: {e}")
                    print(f"Failed to send message: {e}")
            elif time_difference.days == 0:
                telegram_id = await get_telegram_id_for_client_id(i['clientid'])
                print(f"Sending message to Telegram ID: {telegram_id}")
                
                inline = InlineKeyboardMarkup().add(InlineKeyboardButton(text="‚è©Ô∏è –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='add_device'))
                
                try:
                    await bot.send_message(
                        chat_id=telegram_id,
                        text=f"üîö –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –í–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ <b>{sub_name}</b> –∏—Å—Ç—ë–∫\n‚è©Ô∏è –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ, –ª–∏–±–æ –ø–æ –∫–Ω–æ–ø–∫–µ [‚è©Ô∏è –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É] –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\nüéüÔ∏è –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ –¥–æ 30 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞",
                        parse_mode=ParseMode.HTML,
                        reply_markup=inline
                    )
                    print("Message sent successfully.")
                except Exception as e:
                    (f"Failed to send message: {e}")
                    print(f"Failed to send message: {e}")






async def check_time():
    while True:
        now = datetime.now().time()
        if now.hour == 20 and now.minute == 0:
            await midnight_task()
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –≤—Ä–µ–º—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É


if __name__ == '__main__':
    import asyncio
    # Initialize logging with the log file from config.yaml
    loop = asyncio.get_event_loop()
    loop.create_task(dp.start_polling())
    loop.create_task(check_time())
    loop.run_forever()
